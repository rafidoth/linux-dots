{"version":2,"sessionId":"535977a7-7f36-4fe9-be8d-42bf3505f5c3","linearHistory":[{"requestId":"request_c51b6507-db58-4f50-9874-da3d223c10a3","stops":[{"entries":[{"resource":"file:///home/raphy/dev/jigao-new/tsconfig.json","languageId":"jsonc","originalHash":"6d9735e","currentHash":"6d9735e","originalToCurrentEdit":[],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/home/raphy/dev/jigao-new/tsconfig.json?%7B%22sessionId%22%3A%22535977a7-7f36-4fe9-be8d-42bf3505f5c3%22%2C%22requestId%22%3A%22request_c51b6507-db58-4f50-9874-da3d223c10a3%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_c51b6507-db58-4f50-9874-da3d223c10a3"}}]}],"postEdit":[{"resource":"file:///home/raphy/dev/jigao-new/tsconfig.json","languageId":"jsonc","originalHash":"6d9735e","currentHash":"6d9735e","originalToCurrentEdit":[{"pos":0,"len":1,"txt":"{"},{"pos":2,"len":22,"txt":"  \"compilerOptions\": {"},{"pos":25,"len":68,"txt":"    /* Visit https://aka.ms/tsconfig to read more about this file */"},{"pos":95,"len":18,"txt":"    /* Projects */"},{"pos":114,"len":136,"txt":"    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */"},{"pos":251,"len":149,"txt":"    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */"},{"pos":401,"len":125,"txt":"    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */"},{"pos":527,"len":160,"txt":"    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */"},{"pos":688,"len":130,"txt":"    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */"},{"pos":819,"len":128,"txt":"    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */"},{"pos":949,"len":34,"txt":"    /* Language and Environment */"},{"pos":984,"len":133,"txt":"    \"target\": \"es2015\" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,"},{"pos":1118,"len":159,"txt":"    // \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */"},{"pos":1278,"len":98,"txt":"    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */"},{"pos":1377,"len":86,"txt":"    // \"libReplacement\": true,                           /* Enable lib replacement. */"},{"pos":1464,"len":126,"txt":"    // \"experimentalDecorators\": true,                   /* Enable experimental support for legacy experimental decorators. */"},{"pos":1591,"len":132,"txt":"    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */"},{"pos":1724,"len":166,"txt":"    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */"},{"pos":1891,"len":183,"txt":"    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */"},{"pos":2075,"len":158,"txt":"    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */"},{"pos":2234,"len":161,"txt":"    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */"},{"pos":2396,"len":131,"txt":"    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */"},{"pos":2528,"len":111,"txt":"    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */"},{"pos":2640,"len":99,"txt":"    \"moduleDetection\": \"force\" /* Control what method is used to detect module-format JS files. */,"},{"pos":2741,"len":17,"txt":"    /* Modules */"},{"pos":2759,"len":70,"txt":"    \"module\": \"nodenext\" /* Specify what module code is generated. */,"},{"pos":2830,"len":76,"txt":"    \"rootDir\": \"./\" /* Specify the root folder within your source files. */,"},{"pos":2907,"len":111,"txt":"    \"moduleResolution\": \"nodenext\" /* Specify how TypeScript looks up a file from a given module specifier. */,"},{"pos":3019,"len":91,"txt":"    \"baseUrl\": \"./\" /* Specify the base directory to resolve non-relative module names. */,"},{"pos":3111,"len":99,"txt":"    \"paths\": {} /* Specify a set of entries that re-map imports to additional lookup locations. */,"},{"pos":3211,"len":130,"txt":"    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */"},{"pos":3342,"len":126,"txt":"    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */"},{"pos":3469,"len":147,"txt":"    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */"},{"pos":3617,"len":104,"txt":"    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */"},{"pos":3722,"len":124,"txt":"    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */"},{"pos":3847,"len":213,"txt":"    // \"allowImportingTsExtensions\": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */"},{"pos":4061,"len":193,"txt":"    // \"rewriteRelativeImportExtensions\": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */"},{"pos":4255,"len":131,"txt":"    // \"resolvePackageJsonExports\": true,                /* Use the package.json 'exports' field when resolving package imports. */"},{"pos":4387,"len":123,"txt":"    // \"resolvePackageJsonImports\": true,                /* Use the package.json 'imports' field when resolving imports. */"},{"pos":4511,"len":150,"txt":"    // \"customConditions\": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */"},{"pos":4662,"len":89,"txt":"    // \"noUncheckedSideEffectImports\": true,             /* Check side effect imports. */"},{"pos":4752,"len":66,"txt":"    \"resolveJsonModule\": true /* Enable importing .json files. */,"},{"pos":4819,"len":145,"txt":"    // \"allowArbitraryExtensions\": true,                 /* Enable importing files with any extension, provided a declaration file is present. */"},{"pos":4965,"len":182,"txt":"    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */"},{"pos":5149,"len":28,"txt":"    /* JavaScript Support */"},{"pos":5178,"len":172,"txt":"    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */"},{"pos":5351,"len":119,"txt":"    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */"},{"pos":5471,"len":183,"txt":"    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */"},{"pos":5656,"len":14,"txt":"    /* Emit */"},{"pos":5671,"len":137,"txt":"    // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */"},{"pos":5809,"len":96,"txt":"    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */"},{"pos":5906,"len":111,"txt":"    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */"},{"pos":6019,"len":82,"txt":"    \"sourceMap\": true /* Create source map files for emitted JavaScript files. */,"},{"pos":6102,"len":117,"txt":"    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */"},{"pos":6220,"len":105,"txt":"    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */"},{"pos":6326,"len":208,"txt":"    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */"},{"pos":6535,"len":75,"txt":"    \"outDir\": \"dist\" /* Specify an output folder for all emitted files. */,"},{"pos":6611,"len":89,"txt":"    // \"removeComments\": true,                           /* Disable emitting comments. */"},{"pos":6701,"len":160,"txt":"    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */"},{"pos":6862,"len":141,"txt":"    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */"},{"pos":7004,"len":133,"txt":"    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */"},{"pos":7138,"len":154,"txt":"    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */"},{"pos":7293,"len":131,"txt":"    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */"},{"pos":7425,"len":131,"txt":"    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */"},{"pos":7557,"len":108,"txt":"    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */"},{"pos":7666,"len":139,"txt":"    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */"},{"pos":7806,"len":142,"txt":"    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */"},{"pos":7949,"len":127,"txt":"    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */"},{"pos":8077,"len":123,"txt":"    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */"},{"pos":8201,"len":124,"txt":"    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */"},{"pos":8327,"len":29,"txt":"    /* Interop Constraints */"},{"pos":8357,"len":143,"txt":"    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */"},{"pos":8501,"len":198,"txt":"    \"verbatimModuleSyntax\": true /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */,"},{"pos":8700,"len":160,"txt":"    // \"isolatedDeclarations\": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */"},{"pos":8861,"len":127,"txt":"    // \"erasableSyntaxOnly\": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */"},{"pos":8989,"len":131,"txt":"    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */"},{"pos":9121,"len":177,"txt":"    \"esModuleInterop\": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,"},{"pos":9299,"len":150,"txt":"    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */"},{"pos":9450,"len":93,"txt":"    \"forceConsistentCasingInFileNames\": true /* Ensure that casing is correct in imports. */,"},{"pos":9545,"len":23,"txt":"    /* Type Checking */"},{"pos":9569,"len":66,"txt":"    \"strict\": true /* Enable all strict type-checking options. */,"},{"pos":9636,"len":146,"txt":"    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */"},{"pos":9783,"len":124,"txt":"    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */"},{"pos":9908,"len":161,"txt":"    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */"},{"pos":10070,"len":156,"txt":"    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */"},{"pos":10227,"len":139,"txt":"    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */"},{"pos":10367,"len":153,"txt":"    // \"strictBuiltinIteratorReturn\": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */"},{"pos":10521,"len":122,"txt":"    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */"},{"pos":10644,"len":124,"txt":"    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */"},{"pos":10769,"len":101,"txt":"    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */"},{"pos":10871,"len":119,"txt":"    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */"},{"pos":10991,"len":115,"txt":"    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */"},{"pos":11107,"len":140,"txt":"    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */"},{"pos":11248,"len":144,"txt":"    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */"},{"pos":11393,"len":129,"txt":"    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */"},{"pos":11523,"len":99,"txt":"    \"noUncheckedIndexedAccess\": true /* Add 'undefined' to a type when accessed using an index. */,"},{"pos":11623,"len":145,"txt":"    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */"},{"pos":11769,"len":136,"txt":"    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */"},{"pos":11906,"len":105,"txt":"    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */"},{"pos":12012,"len":108,"txt":"    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */"},{"pos":12122,"len":22,"txt":"    /* Completeness */"},{"pos":12145,"len":128,"txt":"    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */"},{"pos":12274,"len":66,"txt":"    \"skipLibCheck\": true /* Skip type checking all .d.ts files. */"},{"pos":12341,"len":3,"txt":"  }"},{"pos":12345,"len":1,"txt":"}"}],"state":0,"snapshotUri":"chat-editing-snapshot-text-model:/home/raphy/dev/jigao-new/tsconfig.json?%7B%22sessionId%22%3A%22535977a7-7f36-4fe9-be8d-42bf3505f5c3%22%2C%22requestId%22%3A%22request_c51b6507-db58-4f50-9874-da3d223c10a3%22%2C%22undoStop%22%3A%22d19944f6-f46c-4e17-911b-79a8e843c7c0%22%7D","telemetryInfo":{"requestId":"request_c51b6507-db58-4f50-9874-da3d223c10a3"}}]}],"linearHistoryIndex":1,"initialFileContents":[["file:///home/raphy/dev/jigao-new/tsconfig.json","6d9735e"]],"recentSnapshot":{"entries":[{"resource":"file:///home/raphy/dev/jigao-new/tsconfig.json","languageId":"jsonc","originalHash":"d91ad2b","currentHash":"d91ad2b","originalToCurrentEdit":[],"state":1,"snapshotUri":"chat-editing-snapshot-text-model:/home/raphy/dev/jigao-new/tsconfig.json?%7B%22sessionId%22%3A%22535977a7-7f36-4fe9-be8d-42bf3505f5c3%22%2C%22requestId%22%3A%22%22%2C%22undoStop%22%3A%22%22%7D","telemetryInfo":{"requestId":"request_c51b6507-db58-4f50-9874-da3d223c10a3"}}]}}